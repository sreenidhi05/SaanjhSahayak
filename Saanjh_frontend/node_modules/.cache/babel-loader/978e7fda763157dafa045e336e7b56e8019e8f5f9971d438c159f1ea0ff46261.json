{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { useMutation } from '@tanstack/react-query';\n\n// const makeRequestAPI = async (prompt) => {\n//   const response = await axios.post('http://localhost:8080/diagnose', { prompt });\n//   return response.data;\n// };\n\n// const EditableForm = ({ initialData }) => {\n//   const [formData, setFormData] = useState(initialData || {});\n//   const [isEditing, setIsEditing] = useState(false);\n//   const [diagnosisReport, setDiagnosisReport] = useState(null);\n\n//   useEffect(() => {\n//     setFormData(initialData);\n//   }, [initialData]);\n\n//   const handleInputChange = (e, path) => {\n//     const { name, value } = e.target;\n//     const updatedFormData = { ...formData };\n\n//     let nested = updatedFormData;\n//     for (let i = 0; i < path.length - 1; i++) {\n//       nested = nested[path[i]];\n//     }\n//     nested[path[path.length - 1]] = value;\n\n//     setFormData(updatedFormData);\n//   };\n\n//   const renderFields = (data, path = []) => {\n//     return Object.keys(data).map((key) => {\n//       const value = data[key];\n//       const currentPath = [...path, key];\n\n//       if (typeof value === 'object' && value !== null) {\n//         return (\n//           <div key={key}>\n//             <strong style={{ display: 'block', marginTop: '10px', marginBottom: '5px' }}>{key}</strong>\n//             {renderFields(value, currentPath)}\n//           </div>\n//         );\n//       } else {\n//         return (\n//           <div key={key} style={{ display: 'flex', marginBottom: '10px', fontSize: '15px' }}>\n//             <div style={{ textAlign: 'center', justifyContent: 'center', width: '150px', color: 'black', fontWeight: '400', backgroundColor: 'skyblue', borderRadius: '6px', padding: '4px' }}>\n//               {key}\n//             </div>\n//             <div style={{ flex: 1, paddingLeft: '1rem', backgroundColor: 'ButtonHighlight', borderRadius: '6px', paddingTop: '4px' }}>\n//               {isEditing ? (\n//                 <input\n//                   type=\"text\"\n//                   name={key}\n//                   value={value}\n//                   onChange={(e) => handleInputChange(e, currentPath)}\n//                   style={{ width: '800px', backgroundColor: 'ButtonHighlight' }}\n//                 />\n//               ) : (\n//                 <span>{value}</span>\n//               )}\n//             </div>\n//           </div>\n//         );\n//       }\n//     });\n//   };\n\n//   const mutation = useMutation({\n//     mutationFn: makeRequestAPI,\n//     mutationKey: ['gemini-ai-request']\n//   });\n\n//   const submitHandler = (e) => {\n//     e.preventDefault();\n//     const prompt = JSON.stringify(formData);\n//     mutation.mutate(prompt);\n//   };\n//   const handleSave = async () => {\n//     try {\n//       const response = await axios.post('http://localhost:8080/save', formData);\n//       console.log('Save response:', response.data);\n//       setIsEditing(false);\n//     } catch (error) {\n//       console.error('Error saving data:', error);\n//     }\n//   };\n\n//   return (\n//     <div className='pl-10 pr-10'>\n//       <h1 className=\"mb-4 text-3xl font-extrabold text-blue-600 md:text-5xl lg:text-5xl pb-2 flex items-center\">\n//         Report Details\n//         <span className=\"ml-4\">\n//           <img width={40} src=\"https://res.cloudinary.com/duwadnxwf/image/upload/v1716300380/patient_u29wkb.png\" alt=\"patient icon\" />\n//         </span>\n//       </h1>\n\n//       {renderFields(formData)}\n\n//       <button\n//         type=\"button\"\n//         className=\"mt-3 text-white bg-gradient-to-r from-blue-500 via-blue-600 to-blue-700 hover:bg-gradient-to-br font-medium rounded-lg text-s px-4 py-2.5 text-center inline-flex items-center me-2 mb-2\"\n//         onClick={() => setIsEditing(!isEditing)}\n//       >\n//         {!isEditing && <img src=\"https://res.cloudinary.com/duwadnxwf/image/upload/v1716276383/icons8-edit-24_fpgba3.png\" className=\"h-6 w-5 pb-1\" />}\n//         {isEditing ? 'Cancel' : 'Edit'}\n//       </button>\n//       {isEditing &&\n//         <button type=\"button\"\n//           className=\"mt-3 mb-5 text-white bg-gradient-to-r from-blue-500 via-blue-600 to-blue-700 hover:bg-gradient-to-br font-medium rounded-lg text-s px-4 py-2.5 text-center inline-flex items-center me-2 mb-2\"\n//           onClick={handleSave}>Save</button>}\n\n//       {!isEditing &&\n//         <form onSubmit={submitHandler}>\n//           <button\n//             type=\"submit\"\n//             className=\"mt-3 mb-5 text-white bg-gradient-to-r from-blue-500 via-blue-600 to-blue-700 hover:bg-gradient-to-br font-medium rounded-lg text-s px-4 py-2.5 text-center inline-flex items-center me-2 mb-2\"\n//           >\n//             Diagnose\n//           </button>\n//         </form>\n//       }\n\n//       {mutation.isPending && <p>Generating your content</p>}\n//       {mutation.isError && <p>{mutation.error.message}</p>}\n//       {mutation.isSuccess && <p>{mutation.data}</p>}\n//     </div>\n//   );\n// };\n\n// export default EditableForm;","map":{"version":3,"names":[],"sources":["E:/SaanjhSahayak/Saanjh_frontend/src/components/EditableForm.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import { useMutation } from '@tanstack/react-query';\r\n\r\n// const makeRequestAPI = async (prompt) => {\r\n//   const response = await axios.post('http://localhost:8080/diagnose', { prompt });\r\n//   return response.data;\r\n// };\r\n\r\n// const EditableForm = ({ initialData }) => {\r\n//   const [formData, setFormData] = useState(initialData || {});\r\n//   const [isEditing, setIsEditing] = useState(false);\r\n//   const [diagnosisReport, setDiagnosisReport] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     setFormData(initialData);\r\n//   }, [initialData]);\r\n\r\n//   const handleInputChange = (e, path) => {\r\n//     const { name, value } = e.target;\r\n//     const updatedFormData = { ...formData };\r\n\r\n//     let nested = updatedFormData;\r\n//     for (let i = 0; i < path.length - 1; i++) {\r\n//       nested = nested[path[i]];\r\n//     }\r\n//     nested[path[path.length - 1]] = value;\r\n\r\n//     setFormData(updatedFormData);\r\n//   };\r\n\r\n//   const renderFields = (data, path = []) => {\r\n//     return Object.keys(data).map((key) => {\r\n//       const value = data[key];\r\n//       const currentPath = [...path, key];\r\n\r\n//       if (typeof value === 'object' && value !== null) {\r\n//         return (\r\n//           <div key={key}>\r\n//             <strong style={{ display: 'block', marginTop: '10px', marginBottom: '5px' }}>{key}</strong>\r\n//             {renderFields(value, currentPath)}\r\n//           </div>\r\n//         );\r\n//       } else {\r\n//         return (\r\n//           <div key={key} style={{ display: 'flex', marginBottom: '10px', fontSize: '15px' }}>\r\n//             <div style={{ textAlign: 'center', justifyContent: 'center', width: '150px', color: 'black', fontWeight: '400', backgroundColor: 'skyblue', borderRadius: '6px', padding: '4px' }}>\r\n//               {key}\r\n//             </div>\r\n//             <div style={{ flex: 1, paddingLeft: '1rem', backgroundColor: 'ButtonHighlight', borderRadius: '6px', paddingTop: '4px' }}>\r\n//               {isEditing ? (\r\n//                 <input\r\n//                   type=\"text\"\r\n//                   name={key}\r\n//                   value={value}\r\n//                   onChange={(e) => handleInputChange(e, currentPath)}\r\n//                   style={{ width: '800px', backgroundColor: 'ButtonHighlight' }}\r\n//                 />\r\n//               ) : (\r\n//                 <span>{value}</span>\r\n//               )}\r\n//             </div>\r\n//           </div>\r\n//         );\r\n//       }\r\n//     });\r\n//   };\r\n\r\n//   const mutation = useMutation({\r\n//     mutationFn: makeRequestAPI,\r\n//     mutationKey: ['gemini-ai-request']\r\n//   });\r\n\r\n//   const submitHandler = (e) => {\r\n//     e.preventDefault();\r\n//     const prompt = JSON.stringify(formData);\r\n//     mutation.mutate(prompt);\r\n//   };\r\n//   const handleSave = async () => {\r\n//     try {\r\n//       const response = await axios.post('http://localhost:8080/save', formData);\r\n//       console.log('Save response:', response.data);\r\n//       setIsEditing(false);\r\n//     } catch (error) {\r\n//       console.error('Error saving data:', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className='pl-10 pr-10'>\r\n//       <h1 className=\"mb-4 text-3xl font-extrabold text-blue-600 md:text-5xl lg:text-5xl pb-2 flex items-center\">\r\n//         Report Details\r\n//         <span className=\"ml-4\">\r\n//           <img width={40} src=\"https://res.cloudinary.com/duwadnxwf/image/upload/v1716300380/patient_u29wkb.png\" alt=\"patient icon\" />\r\n//         </span>\r\n//       </h1>\r\n\r\n\r\n//       {renderFields(formData)}\r\n\r\n\r\n//       <button\r\n//         type=\"button\"\r\n//         className=\"mt-3 text-white bg-gradient-to-r from-blue-500 via-blue-600 to-blue-700 hover:bg-gradient-to-br font-medium rounded-lg text-s px-4 py-2.5 text-center inline-flex items-center me-2 mb-2\"\r\n//         onClick={() => setIsEditing(!isEditing)}\r\n//       >\r\n//         {!isEditing && <img src=\"https://res.cloudinary.com/duwadnxwf/image/upload/v1716276383/icons8-edit-24_fpgba3.png\" className=\"h-6 w-5 pb-1\" />}\r\n//         {isEditing ? 'Cancel' : 'Edit'}\r\n//       </button>\r\n//       {isEditing &&\r\n//         <button type=\"button\"\r\n//           className=\"mt-3 mb-5 text-white bg-gradient-to-r from-blue-500 via-blue-600 to-blue-700 hover:bg-gradient-to-br font-medium rounded-lg text-s px-4 py-2.5 text-center inline-flex items-center me-2 mb-2\"\r\n//           onClick={handleSave}>Save</button>}\r\n\r\n//       {!isEditing &&\r\n//         <form onSubmit={submitHandler}>\r\n//           <button\r\n//             type=\"submit\"\r\n//             className=\"mt-3 mb-5 text-white bg-gradient-to-r from-blue-500 via-blue-600 to-blue-700 hover:bg-gradient-to-br font-medium rounded-lg text-s px-4 py-2.5 text-center inline-flex items-center me-2 mb-2\"\r\n//           >\r\n//             Diagnose\r\n//           </button>\r\n//         </form>\r\n//       }\r\n\r\n//       {mutation.isPending && <p>Generating your content</p>}\r\n//       {mutation.isError && <p>{mutation.error.message}</p>}\r\n//       {mutation.isSuccess && <p>{mutation.data}</p>}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default EditableForm;"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}